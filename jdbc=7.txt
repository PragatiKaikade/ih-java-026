Thin-Client/Fat-Server Application
===================================
Every JDBC application is a thin-client/fat-server application.

Diagram: jdbc7.1

To develop thin-client/fat-server application we need to keep our business logic and persistence logic in the database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.


Procedure
----------
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
is
begin
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter 
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the values to IN parameter
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		System.out.println("sum of two numbers is ="+result);
		
		cst.close();
		con.close();
		
	}
}

Types of ResultSet objects
==========================
We have two types of ResultSet objects.

1)Non-scrollable ResultSet object

2)Scrollable ResultSet object 

Diagram: jdbc7.2

1)Non-scrollable ResultSet object
--------------------------------
If a ResultSet object which allows us to read the records sequentially , uni-directionally is called non-scrollable ResultSet object.

By default every ResultSet object is a non-scrollable ResultSet object.

If a JDBC Statement object is created without type and mode value then that ResultSet object is called non-scrollable ResultSet object.
ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2)Scrollable ResultSet object
--------------------------------
If a ResultSet object which allows us to read the records non-sequentially , bi-directionally or randomly is called scrollable ResultSet object.


If a JDBC Statement object is created with type and mode value then that ResultSet object is called scrollable ResultSet object.
ex:
	Statement st=con.createStatement(type_value,mode_value);
	ResultSet rs=st.executeQuery("select * from student");

We have two types values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE 
	ResultSEt.TYPE_SCROLL_INSENSITIVE 

We have two mode values.
ex:
	ResultSet.CONCUR_UPDATABLE
	ResultSet.CONCUR_READ_ONLY

Methods present in Scrollable ResultSet object
----------------------------------------------

next()
------
	It will move record pointer to next position from current position.

getRow()
-------
	It will return position of record pointer.

getXxx()
-------
	It will read the values from record ResultSet.

close()
------
	It is used to close ResultSet object.

previous()
----------
	It will move record pointer to previous position from current position.

first()
--------
	It will set the record pointer to first record.

isFirst()
---------
	It will check record pointer is in first record or not.

last()
-----
	It will set the record pointer to last record.
	
isLast()
-------
	It will check record pointer is in last record or not.

beforeFirst()
-----------
	It will set the record pointer to BFR position.

afterLast()
-----------
	It will set the record pointer to ALR position.

relative(+/-)
-----------
	It will move record pointer to next position based on current position.

absoluate(+/-)
--------------
	It will move record pointer to next position based on BFR and ALR position.

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableResultSetApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
										ResultSet.CONCUR_READ_ONLY);
		
		String qry="select * from student";
		
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		//bottom to top 
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		
		rs.last();
		System.out.println(rs.isLast());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		//System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.close();
		st.close();
		con.close();
	}
}

Batch Processing
=================
Batch processing is used to declare multiple queries to batch and make a single call to database.

To add each query to batch we need to use addBatch() method of Statement object.
ex:
	st.addBatch(qry);

To execute the batch we need to use executeBatch() method of Statement object.
ex:
	int[] result=st.executeBatch();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		//declare the queries
		String qry1="insert into student values(104,'ramana','vizag')";
		String qry2="delete from student where sno=103";
		String qry3="update student set sname='raja' where sno=101";
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		System.out.println("No of records effected are :"+sum);
		st.close();
		con.close();
	}
}

Transaction Management
=======================
A transaction is a group of operations used to performe one task.

Transaction management will commit if transaction is succeeded.

Transaction management will rollback is transaction is failed.

ex:
---

sbi table
=========
drop table sbi;
create table sbi(accno number(6),accholder varchar2(10), accbal number(10));
insert into sbi values(111111,'naveen',5000);
insert into sbi values(222222,'krishna',6000);
commit;

kotak table
===========
drop table kotak;
create table kotak(accno number(6),accholder varchar2(10),accbal number(10));
insert into kotak values(100001,'prashanth',80000);
insert into kotak values(200002,'bhaskar',90000);
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the source Account No :");
		int sno=sc.nextInt();
		System.out.println("Enter the destination account no :");
		int dno=sc.nextInt();
		System.out.println("Enter the amount to transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");

		//set auto commit false
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		//create queries 
		String qry1="update kotak set accbal=accbal-"+amt+" where accno="+sno;
		String qry2="update sbi set accbal=accbal+"+amt+" where accno="+dno;
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute batch
		int[] result=st.executeBatch();
		
		//for each loop
		boolean flag=true;
		for(int i:result)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		
		if(flag==true)
		{
			System.out.println("Transaction Done Successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed ");
			con.rollback();
		}
		st.close();
		con.close();
	}
}



















































































































































































